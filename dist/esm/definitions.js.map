{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface ForegroundServicePlugin {\n  /**\n   * Moves the app to the foreground.\n   *\n   * On Android SDK 23+, the user must grant the manage overlay permission.\n   * You can use the `requestManageOverlayPermission()` method to request the\n   * permission and the `checkManageOverlayPermission()` method to check if the\n   * permission is granted.\n   *\n   * Only available for Android.\n   *\n   * @since 0.3.0\n   * @experimental This method is experimental and may not work as expected.\n   */\n  moveToForeground(): Promise<void>;\n  /**\n   * Starts the foreground service.\n   *\n   * Only available for Android.\n   *\n   * @since 0.0.1\n   */\n  startForegroundService(options: StartForegroundServiceOptions): Promise<void>;\n  /**\n   * Stops the foreground service.\n   *\n   * Only available for Android.\n   *\n   * @since 0.0.1\n   */\n  stopForegroundService(): Promise<void>;\n  /**\n   * Request the manage overlay permission.\n   *\n   * Only available for Android.\n   *\n   * @since 0.3.0\n   */\n  requestManageOverlayPermission(): Promise<ManageOverlayPermissionResult>;\n  /**\n   * Check if the overlay permission is granted.\n   *\n   * Only available for Android.\n   *\n   * @since 0.3.0\n   */\n  checkManageOverlayPermission(): Promise<ManageOverlayPermissionResult>;\n  /**\n   * Called when a notification button is clicked.\n   *\n   * Only available on iOS.\n   *\n   * @since 0.2.0\n   */\n  addListener(\n    eventName: 'buttonClicked',\n    listenerFunc: ButtonClickedEventListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * @since 0.2.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n\nexport interface StartForegroundServiceOptions {\n  /**\n   * The body of the notification, shown below the title.\n   *\n   * @since 0.0.1\n   * @example \"This is the body of the notification\"\n   */\n  body: string;\n  /**\n   * The buttons to show on the notification.\n   *\n   * Only available for Android (SDK 24+).\n   *\n   * @since 0.2.0\n   */\n  buttons?: NotificationButton[];\n  /**\n   * The notification identifier.\n   *\n   * @since 0.0.1\n   * @example 123\n   */\n  id: number;\n  /**\n   * The status bar icon for the notification.\n   *\n   * Icons should be placed in your app's `res/drawable` folder. The value for\n   * this option should be the drawable resource ID, which is the filename\n   * without an extension.\n   *\n   * @since 0.0.1\n   * @example \"ic_stat_icon_config_sample\"\n   */\n  smallIcon: string;\n  /**\n   * The title of the notification.\n   *\n   * @since 0.0.1\n   * @example \"This is the title of the notification\"\n   */\n  title: string;\n}\n\n/**\n * @since 0.2.0\n */\nexport interface NotificationButton {\n  /**\n   * The button title.\n   *\n   * @since 0.2.0\n   * @example \"Stop\"\n   */\n  title: string;\n  /**\n   * The button identifier.\n   *\n   * This is used to identify the button when\n   * the `buttonClicked` event is emitted.\n   *\n   * @since 0.2.0\n   * @example 123\n   */\n  id: number;\n}\n\n/**\n * @since 0.3.0\n */\nexport interface ManageOverlayPermissionResult {\n  /**\n   * Whether the permission is granted.\n   *\n   * This is always `true` on Android SDK < 23.\n   *\n   * @since 0.3.0\n   * @example true\n   */\n  granted: boolean;\n}\n\n/**\n * @since 0.2.0\n */\nexport type ButtonClickedEventListener = (event: ButtonClickedEvent) => void;\n\n/**\n * @since 0.2.0\n */\nexport interface ButtonClickedEvent {\n  /**\n   * The button identifier.\n   *\n   * @since 0.2.0\n   */\n  buttonId: number;\n}\n"]}